#this output generates a nginx ban list
#it also keeps a historical record in an elasticsearch index (yay! using es as a datastore! [This can be bad, just ask any es employee...] but I assume this data can be considered relatively ephemeral )
#the record in es will have the ip, epoch time ban was created, ban length, module name, and comment. 
#this way we take care of creating and expiring bans in nginx. 



use Geo::IP::PurePerl;
use List::MoreUtils 'any';
use warnings;


my $facetedData;
#you need to use the MaxMind GeoIP Organization Database. TODO: Migrate away from this?
my $geoOrgDatabase="/var/lib/GeoIP/GeoIPOrg.dat";
my $crawlers="microsoft|yandex|yahoo|google";
my $result2;
my $high = 5;
my $low = 4;
my $banTheshold = 9;


sub nginx_ban_output {
    debugOutput("\n**DEBUG: Running nginx_ban_output\n");
    my @denyArray;
    my $curlOutput=1;

    #we attempt to get the current ban file so we can tell what is a new ban.
    # this was used as a sort of diff for manually updating the nginx file, but I think 
    # i should drop this and just use the ban db 
    #
    #debugOutput("**DEBUG: Attempting to get and read current nginx ban file");
    #$curlOutput = `curl -s http:/foo.host.lan/packages/centos/nginx/conf/sysban/nginxban.conf -o "$autobanConfig->param('nginx-ban-output.location')"; echo $?`;
    #if we couldnt, give an error
    #if ( $curlOutput != 0 ){
    #	print "\n\nError: could not fetch blockips.conf, trying to work around this... curl exit code: $curlOutput";
    #}

    #read the denyfile into an array
    #open( my $NGINXDENYFILE, "<", $autobanConfig->param('nginx-ban-output.location') ) || die "ERROR: Can't open nginx ban file: $!\n";
    #@denyArray = <$NGINXDENYFILE>;

    
    
    debugOutput("**DEBUG: looping through the ban ips");

    foreach my $ip (sort keys %{$data->{'nginx-es-input'}->{'ipData'}}) {
	#strip the trailing comma from the string
	$comment = substr(($data->{'nginx-es-input'}->{'ipData'}->{$ip}->{'banComment'}),0,-1);
	$comment = "AutoBan - Score: $data->{'nginx-es-input'}->{'ipData'}->{$ip}->{'banScore'} Reason: " . "$comment";

	#if above threshold, ban!
	if ($data->{'nginx-es-input'}->{'ipData'}->{$ip}->{'banScore'} >= $banTheshold){
	    debugOutput("**DEBUG: IP $ip is above ban threshold");

	    # This is where the ban db will come into play. do some sort of query to get all active nginx banned ips and generate ban file
	}
    }


    exit;
}

#required to import
1;
